<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAREREQM5OTkTKioqNzU1NVlHR0dtSUlJb0BAQGUwMDBNLy8vKTAw
        MAsODg4BAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAESEhIFLi4uNTs7O5k7OzubIiIiSQgICA8ICAgHJCQkMzQ0
        NI07Ozu1ODg4cSkpKRkPDw8BAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABBAQEATQ0NC89PT2VNDQ0ZyEhIQ8AAAABAAAAARUV
        FQU+Pj5ZQUFBwzIyMok7OzulODg4czExMQsAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEhISENOjo6bTg4OHUhISERAAAAAQAA
        AAEAAAABHBwcETk5OYVJSUn3PT09oSQkJFc8PDyvMTExKQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAATQ0NCUzMzNzMTExNwAA
        AAEAAAABCgoKDTMzM1cxMTFfMzMzhzs7O5U5OTmLMjIyczExMYE0NDRNAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABRUVFNz8/
        P2kXFxcPAAAAAQAAAAE2NjZlKCgoUygoKG0rKytdKioqZy0tLU81NTU9Hx8fLURERGUAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAFKSko9SUlJZQkJCQEAAAABAAAAATc3N4ktLS1vQ0NDvy0tLW02NjZdFRUVCQgICAMLCwsHSkpKbwAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAUpKSjtISEhnCAgIBQYGBgkUFBQnOTk5kx0dHTkrKytvKysrUzg4OFcAAAABAAAAAQwM
        DBFISEhtAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABOzs7LTMzM28tLS1xPDw8rTExMXspKSldNTU1lTIyMosyMjJlCwsLDQAA
        AAEAAAABJSUlSTg4OFkAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEjIyMVNDQ0dTExMXciIiJFQUFBvUhISPUZGRk/AAAAAQAA
        AAEAAAABAAAAASIiIg89PT2bLCwsNwAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQUFBQM+Pj5NOzs7kzQ0NIlBQUHHSEhI7RQU
        FB8AAAABAAAAAQAAAAEgICARNDQ0Zzw8PJk6OjoTAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAARUVFQ85OTljOjo6lTMz
        M5c6OjqVBAQEBQUFBQETExMPLi4uNTc3N3U8PDyVLy8vNREREQMAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABDAwMCTAw
        MFE4ODh7MjIyeTAwMG9GRkZnSEhIZT09PWkwMDBzOTk5bTMzMy8SEhIFAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQoKCgs7OztzDQ0NFQAAAAEAAAABAAAAAQAAAAEODg4TOTk5aSIiIh0AAAABAAAAAQ0N
        DQk4ODhXREREy0JCQrkrKytJNjY2MUhISD1JSUk9RERENzIyMiUfHx8NBAQEAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABOjo6W0dHR+NAQECnDAwMFwAAAAEAAAABDw8PEz8/P4lHR0flPDw8oQAA
        AAEMDAwHNTU1T0VFRdVKSkr9SUlJ+UNDQ8MmJiYpAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEfHx8hRERE1UlJSfdBQUGnDQ0NFQ8PDxE+Pj6FSEhI70ZG
        RuktLS1HDAwMBTAwMEVFRUXbSEhI8zw8PKFBQUHBSUlJ+UNDQ80LCwsXAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEODg4hRERE10lJSfdAQEC3PDw8m0hI
        SPNFRUXbMDAwRQ0NDQUtLS1HRkZG6UhISO8+Pj6FDw8PERERER1CQkKxSkpK+UNDQ8sgICAdAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEkJCQxREREy0pK
        SvtKSkr9RkZG1TY2Nk8NDQ0HAAAAATw8PKVHR0fnPz8/iQ8PDxMAAAABAAAAARERER9CQkKxR0dH5Tk5
        OVsAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQMDAwEeHh4NMTExJUNDQzlKSko/R0dHPTMz
        My8qKipNQ0NDv0VFRc04ODhXDQ0NCQAAAAEAAAABIiIiIzw8PG8PDw8TAAAAAQAAAAEAAAABAAAAARAQ
        EB0+Pj55CwsLDQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEREREFMjIyLzk5OW0wMDB3PDw8b0hI
        SGtCQkJtLy8vczQ0NHs2NjZ3NDQ0Tw0NDQkAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABEhISAy8vLzU8PDyVNzc3dzAw
        MDkVFRUTBwcHAwkJCQs5OTmZMzMzlTk5OZU7OztZDw8PCQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAE3NzcVPDw8mzQ0
        NGcgICATAAAAAQAAAAEAAAABFhYWI0hISOtBQUG/MTExiTk5OZM8PDxDAwMDAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAASws
        LDk8PDyXISEhDwAAAAEAAAABAAAAAQAAAAEfHx9NSUlJ+UFBQb0fHx9BNDQ0ezc3N3UgICATAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABNzc3VyMjI0MAAAABAAAAAQoKCg0wMDBjMzMziTExMY8rKythMTExeTw8PK0tLS15MzMzczs7
        OysAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAFISEhpCQkJBwAAAAEAAAABOTk5VywsLFMpKSlnGxsbNzU1NY0YGBgzCAgICwwM
        DAlFRUVtSkpKPQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAUpKSmsICAgDBgYGAREREQc1NTVbLi4udUNDQ8MrKytnOTk5iQAA
        AAEAAAABCwsLBUhISGtKSko/AAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABREREZSEhISE2NjY7Li4uSS0tLWcvLy9hKioqdSkp
        KVU0NDRjAAAAAQAAAAEYGBgTPj4+b0ZGRjcAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAE0NDRRLi4ucTIyMnc5OTmLOjo6kzQ0
        NIMxMTFfNDQ0WQsLCw0AAAABAAAAATIyMjkzMzN3NTU1JQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAATAwMC09PT2rJSUlVT8/
        P6dISEj1OTk5fRcXFw8AAAABAAAAAQAAAAEiIiITOTk5dzo6Om0gICANAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABMTExDzk5
        OX88PDyfNDQ0jUJCQstAQEBXFBQUBQAAAAEAAAABICAgDzMzM2c9PT2TMzMzLQQEBAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEVFRUDJycnHzg4OH87Ozu1MTExgSkpKScEBAQDBQUFBx8fH0E6OjqXPDw8my4uLjUREREFAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEUFBQDMDAwDy8vLy0yMjJRQkJCZUlJSWtHR0drNTU1VyoqKjk3NzcVEhISAwAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>